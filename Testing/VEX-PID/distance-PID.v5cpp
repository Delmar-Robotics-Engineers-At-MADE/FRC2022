{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n/*vex-vision-config:begin*/\nvision::signature Vision21__SIG_1 = vision::signature (1, -2655, -1823, -2238,4519, 7221, 5870,3, 0);\nvision::signature Vision21__SIG_2 = vision::signature (2, -2433, -1545, -1989,4259, 7185, 5722,3, 0);\nvision Vision21 = vision (PORT21, 50, Vision21__SIG_1, Vision21__SIG_2);\n/*vex-vision-config:end*/\ncontroller Controller1 = controller(primary);\nmotor MotorLEFT = motor(PORT1, ratio18_1, false);\n\nmotor MotorRIGHT = motor(PORT10, ratio18_1, true);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0, Vision21_objectIndex = 0;\n\nfloat myVariable, P, setpoint, driveDiff, baseSpeed, error;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  P = 1.5;\n  float turnPoint = 180.0;\n  float turnDiff = 0.0;\n  float turnSpeed = 40;\n  while (true) {\n    Vision21.takeSnapshot(Vision21__SIG_1);\n    Vision21_objectIndex = static_cast<int>(1.0) - 1;\n    Brain.Screen.setCursor(1, 1);\n    if (Vision21.objects[Vision21_objectIndex].height >= 70.0) {\n      float zerror = turnPoint - Vision21.objects[Vision21_objectIndex].centerX;\n      Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(zerror));\n      Brain.Screen.print(\"  \");\n      if (Vision21.objectCount == 1.0) {\n        turnDiff = P * zerror;\n        MotorLEFT.setVelocity((turnSpeed + turnDiff), percent);\n        MotorLEFT.setVelocity((turnSpeed - turnDiff), percent);\n        MotorLEFT.spin(forward);\n        MotorRIGHT.spin(forward);\n      }\n      else {\n        MotorLEFT.stop();\n        MotorRIGHT.stop();\n      }\n    }\n  if (Vision21.object[Vision21_objectIndex].height > 100.0) {\n    P = 1.5;\n    setpoint = 180.0;\n    driveDiff = 0.0;\n    baseSpeed = 50;\n      Brain.Screen.setCursor(1, 1);\n      if (Vision21.objects[Vision21_objectIndex].width < 100.0) {\n        error = setpoint - Vision21.objects[Vision21_objectIndex].width;\n        Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(error));\n        Brain.Screen.print(\"  \");\n        if (Vision21.objectCount == 1.0) {\n          driveDiff = P * error;\n          MotorLEFT.setVelocity((baseSpeed + driveDiff), percent);\n          MotorLEFT.setVelocity((baseSpeed + driveDiff), percent);\n          MotorLEFT.spin(forward);\n          MotorRIGHT.spin(forward);\n        }\n        else {\n          MotorLEFT.stop();\n          MotorRIGHT.stop();\n        }\n    }\n  }  \n  wait(5, msec);\n  }\n  return 0;\n\n}\n\nint main() {\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n    \n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[21],"name":"Vision21","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":-2655,\"uMax\":-1823,\"uMean\":-2238,\"vMin\":4519,\"vMax\":7221,\"vMean\":5870,\"rgb\":4018563,\"type\":0,\"name\":\"SIG_1\"},\"range\":3},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":-2433,\"uMax\":-1545,\"uMean\":-1989,\"vMin\":4259,\"vMax\":7185,\"vMean\":5722,\"rgb\":1,\"type\":0,\"name\":\"SIG_2\"},\"range\":3},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"MotorLEFT","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[10],"name":"MotorRIGHT","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}